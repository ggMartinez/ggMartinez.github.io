using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;


public class BuildProject : MonoBehaviour {
	public static string version = System.Environment.GetEnvironmentVariable("projectVersion");
	public static string gameName = System.Environment.GetEnvironmentVariable("gameName");

	public static void BuildWindows64()
	{
		string buildPath = ".\\build\\" + version + "__Win64\\" + gameName + ".exe";
		BuildPipeline.BuildPlayer(
			new string[] { "Assets\\Scenes\\Gameplay\\GamePlay.unity" },
			buildPath,
			BuildTarget.StandaloneWindows64,
			BuildOptions.None
		);
	}

	public static void BuildWindows32()
	{
		string buildPath = ".\\build\\" + version + "__Win32\\" + gameName + ".exe";
		BuildPipeline.BuildPlayer(
			new string[] { "Assets\\Scenes\\Gameplay\\GamePlay.unity" },
			buildPath,
			BuildTarget.StandaloneWindows,
			BuildOptions.None
		);
	}

}

-------

$dateTime = (Get-Date).ToString('yyyyMMddhhmmss')
$projectPath=".\"
$buildMethodWindows64="BuildProject.BuildWindows64"
$buildMethodWindows32="BuildProject.BuildWindows32"
$env:gameName="Plataformerote"
$env:projectVersion="0.1_$dateTime"
$env:environment="Test"

echo "Project Path: $projectPath"
echo "Project environment: $env:environment"
echo "Project version: $env:projectVersion"
echo ""
echo "Building Windows 64 bit executable, Using build method: $buildMethodWindows64"
Start-Process -Wait 'C:\Program Files\Unity\Hub\Editor\2020.3.12f1\Editor\Unity.exe' -ArgumentList "-nographics -batchmode -projectPath $projectPath  -executeMethod $buildMethodWindows64 -quit"

echo "Building Windows 32 bit executable, Using build method: $buildMethodWindows32"
Start-Process -Wait 'C:\Program Files\Unity\Hub\Editor\2020.3.12f1\Editor\Unity.exe' -ArgumentList "-nographics -batchmode-projectPath $projectPath  -executeMethod $buildMethodWindows32 -quit"

------

 powershell -ExecutionPolicy Bypass -File .\build.ps1



